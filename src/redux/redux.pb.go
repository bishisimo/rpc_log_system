// Code generated by protoc-gen-go. DO NOT EDIT.
// source: redux.proto

package redux

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Reply struct {
	Status               string   `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Reply) Reset()         { *m = Reply{} }
func (m *Reply) String() string { return proto.CompactTextString(m) }
func (*Reply) ProtoMessage()    {}
func (*Reply) Descriptor() ([]byte, []int) {
	return fileDescriptor_27440ba755049910, []int{0}
}

func (m *Reply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Reply.Unmarshal(m, b)
}
func (m *Reply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Reply.Marshal(b, m, deterministic)
}
func (m *Reply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Reply.Merge(m, src)
}
func (m *Reply) XXX_Size() int {
	return xxx_messageInfo_Reply.Size(m)
}
func (m *Reply) XXX_DiscardUnknown() {
	xxx_messageInfo_Reply.DiscardUnknown(m)
}

var xxx_messageInfo_Reply proto.InternalMessageInfo

func (m *Reply) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

type AddPubRequest struct {
	Id                   string   `protobuf:"bytes,1,opt,name=Id,proto3" json:"Id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AddPubRequest) Reset()         { *m = AddPubRequest{} }
func (m *AddPubRequest) String() string { return proto.CompactTextString(m) }
func (*AddPubRequest) ProtoMessage()    {}
func (*AddPubRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_27440ba755049910, []int{1}
}

func (m *AddPubRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AddPubRequest.Unmarshal(m, b)
}
func (m *AddPubRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AddPubRequest.Marshal(b, m, deterministic)
}
func (m *AddPubRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddPubRequest.Merge(m, src)
}
func (m *AddPubRequest) XXX_Size() int {
	return xxx_messageInfo_AddPubRequest.Size(m)
}
func (m *AddPubRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_AddPubRequest.DiscardUnknown(m)
}

var xxx_messageInfo_AddPubRequest proto.InternalMessageInfo

func (m *AddPubRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type PubMessage struct {
	Id                   string   `protobuf:"bytes,1,opt,name=Id,proto3" json:"Id,omitempty"`
	Msg                  string   `protobuf:"bytes,2,opt,name=Msg,proto3" json:"Msg,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PubMessage) Reset()         { *m = PubMessage{} }
func (m *PubMessage) String() string { return proto.CompactTextString(m) }
func (*PubMessage) ProtoMessage()    {}
func (*PubMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_27440ba755049910, []int{2}
}

func (m *PubMessage) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PubMessage.Unmarshal(m, b)
}
func (m *PubMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PubMessage.Marshal(b, m, deterministic)
}
func (m *PubMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PubMessage.Merge(m, src)
}
func (m *PubMessage) XXX_Size() int {
	return xxx_messageInfo_PubMessage.Size(m)
}
func (m *PubMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_PubMessage.DiscardUnknown(m)
}

var xxx_messageInfo_PubMessage proto.InternalMessageInfo

func (m *PubMessage) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *PubMessage) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

type RemovePubRequest struct {
	Id                   string   `protobuf:"bytes,1,opt,name=Id,proto3" json:"Id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RemovePubRequest) Reset()         { *m = RemovePubRequest{} }
func (m *RemovePubRequest) String() string { return proto.CompactTextString(m) }
func (*RemovePubRequest) ProtoMessage()    {}
func (*RemovePubRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_27440ba755049910, []int{3}
}

func (m *RemovePubRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RemovePubRequest.Unmarshal(m, b)
}
func (m *RemovePubRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RemovePubRequest.Marshal(b, m, deterministic)
}
func (m *RemovePubRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RemovePubRequest.Merge(m, src)
}
func (m *RemovePubRequest) XXX_Size() int {
	return xxx_messageInfo_RemovePubRequest.Size(m)
}
func (m *RemovePubRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RemovePubRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RemovePubRequest proto.InternalMessageInfo

func (m *RemovePubRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type AddSubRequest struct {
	Id                   string   `protobuf:"bytes,1,opt,name=Id,proto3" json:"Id,omitempty"`
	AcceptType           string   `protobuf:"bytes,2,opt,name=AcceptType,proto3" json:"AcceptType,omitempty"`
	IsFlow               bool     `protobuf:"varint,3,opt,name=IsFlow,proto3" json:"IsFlow,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AddSubRequest) Reset()         { *m = AddSubRequest{} }
func (m *AddSubRequest) String() string { return proto.CompactTextString(m) }
func (*AddSubRequest) ProtoMessage()    {}
func (*AddSubRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_27440ba755049910, []int{4}
}

func (m *AddSubRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AddSubRequest.Unmarshal(m, b)
}
func (m *AddSubRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AddSubRequest.Marshal(b, m, deterministic)
}
func (m *AddSubRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddSubRequest.Merge(m, src)
}
func (m *AddSubRequest) XXX_Size() int {
	return xxx_messageInfo_AddSubRequest.Size(m)
}
func (m *AddSubRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_AddSubRequest.DiscardUnknown(m)
}

var xxx_messageInfo_AddSubRequest proto.InternalMessageInfo

func (m *AddSubRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *AddSubRequest) GetAcceptType() string {
	if m != nil {
		return m.AcceptType
	}
	return ""
}

func (m *AddSubRequest) GetIsFlow() bool {
	if m != nil {
		return m.IsFlow
	}
	return false
}

type FlowSubReply struct {
	Body                 string   `protobuf:"bytes,1,opt,name=Body,proto3" json:"Body,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FlowSubReply) Reset()         { *m = FlowSubReply{} }
func (m *FlowSubReply) String() string { return proto.CompactTextString(m) }
func (*FlowSubReply) ProtoMessage()    {}
func (*FlowSubReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_27440ba755049910, []int{5}
}

func (m *FlowSubReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FlowSubReply.Unmarshal(m, b)
}
func (m *FlowSubReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FlowSubReply.Marshal(b, m, deterministic)
}
func (m *FlowSubReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FlowSubReply.Merge(m, src)
}
func (m *FlowSubReply) XXX_Size() int {
	return xxx_messageInfo_FlowSubReply.Size(m)
}
func (m *FlowSubReply) XXX_DiscardUnknown() {
	xxx_messageInfo_FlowSubReply.DiscardUnknown(m)
}

var xxx_messageInfo_FlowSubReply proto.InternalMessageInfo

func (m *FlowSubReply) GetBody() string {
	if m != nil {
		return m.Body
	}
	return ""
}

type GetTargetPathRequest struct {
	Id                   string   `protobuf:"bytes,1,opt,name=Id,proto3" json:"Id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetTargetPathRequest) Reset()         { *m = GetTargetPathRequest{} }
func (m *GetTargetPathRequest) String() string { return proto.CompactTextString(m) }
func (*GetTargetPathRequest) ProtoMessage()    {}
func (*GetTargetPathRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_27440ba755049910, []int{6}
}

func (m *GetTargetPathRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetTargetPathRequest.Unmarshal(m, b)
}
func (m *GetTargetPathRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetTargetPathRequest.Marshal(b, m, deterministic)
}
func (m *GetTargetPathRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetTargetPathRequest.Merge(m, src)
}
func (m *GetTargetPathRequest) XXX_Size() int {
	return xxx_messageInfo_GetTargetPathRequest.Size(m)
}
func (m *GetTargetPathRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetTargetPathRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetTargetPathRequest proto.InternalMessageInfo

func (m *GetTargetPathRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type TargetPathReply struct {
	Paths                []string `protobuf:"bytes,1,rep,name=Paths,proto3" json:"Paths,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TargetPathReply) Reset()         { *m = TargetPathReply{} }
func (m *TargetPathReply) String() string { return proto.CompactTextString(m) }
func (*TargetPathReply) ProtoMessage()    {}
func (*TargetPathReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_27440ba755049910, []int{7}
}

func (m *TargetPathReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TargetPathReply.Unmarshal(m, b)
}
func (m *TargetPathReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TargetPathReply.Marshal(b, m, deterministic)
}
func (m *TargetPathReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TargetPathReply.Merge(m, src)
}
func (m *TargetPathReply) XXX_Size() int {
	return xxx_messageInfo_TargetPathReply.Size(m)
}
func (m *TargetPathReply) XXX_DiscardUnknown() {
	xxx_messageInfo_TargetPathReply.DiscardUnknown(m)
}

var xxx_messageInfo_TargetPathReply proto.InternalMessageInfo

func (m *TargetPathReply) GetPaths() []string {
	if m != nil {
		return m.Paths
	}
	return nil
}

type RemoveSubRequest struct {
	Id                   string   `protobuf:"bytes,1,opt,name=Id,proto3" json:"Id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RemoveSubRequest) Reset()         { *m = RemoveSubRequest{} }
func (m *RemoveSubRequest) String() string { return proto.CompactTextString(m) }
func (*RemoveSubRequest) ProtoMessage()    {}
func (*RemoveSubRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_27440ba755049910, []int{8}
}

func (m *RemoveSubRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RemoveSubRequest.Unmarshal(m, b)
}
func (m *RemoveSubRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RemoveSubRequest.Marshal(b, m, deterministic)
}
func (m *RemoveSubRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RemoveSubRequest.Merge(m, src)
}
func (m *RemoveSubRequest) XXX_Size() int {
	return xxx_messageInfo_RemoveSubRequest.Size(m)
}
func (m *RemoveSubRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RemoveSubRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RemoveSubRequest proto.InternalMessageInfo

func (m *RemoveSubRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type BlankRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BlankRequest) Reset()         { *m = BlankRequest{} }
func (m *BlankRequest) String() string { return proto.CompactTextString(m) }
func (*BlankRequest) ProtoMessage()    {}
func (*BlankRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_27440ba755049910, []int{9}
}

func (m *BlankRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BlankRequest.Unmarshal(m, b)
}
func (m *BlankRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BlankRequest.Marshal(b, m, deterministic)
}
func (m *BlankRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BlankRequest.Merge(m, src)
}
func (m *BlankRequest) XXX_Size() int {
	return xxx_messageInfo_BlankRequest.Size(m)
}
func (m *BlankRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_BlankRequest.DiscardUnknown(m)
}

var xxx_messageInfo_BlankRequest proto.InternalMessageInfo

type InfoReply struct {
	Info                 []byte   `protobuf:"bytes,1,opt,name=Info,proto3" json:"Info,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *InfoReply) Reset()         { *m = InfoReply{} }
func (m *InfoReply) String() string { return proto.CompactTextString(m) }
func (*InfoReply) ProtoMessage()    {}
func (*InfoReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_27440ba755049910, []int{10}
}

func (m *InfoReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_InfoReply.Unmarshal(m, b)
}
func (m *InfoReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_InfoReply.Marshal(b, m, deterministic)
}
func (m *InfoReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InfoReply.Merge(m, src)
}
func (m *InfoReply) XXX_Size() int {
	return xxx_messageInfo_InfoReply.Size(m)
}
func (m *InfoReply) XXX_DiscardUnknown() {
	xxx_messageInfo_InfoReply.DiscardUnknown(m)
}

var xxx_messageInfo_InfoReply proto.InternalMessageInfo

func (m *InfoReply) GetInfo() []byte {
	if m != nil {
		return m.Info
	}
	return nil
}

func init() {
	proto.RegisterType((*Reply)(nil), "Reply")
	proto.RegisterType((*AddPubRequest)(nil), "AddPubRequest")
	proto.RegisterType((*PubMessage)(nil), "PubMessage")
	proto.RegisterType((*RemovePubRequest)(nil), "RemovePubRequest")
	proto.RegisterType((*AddSubRequest)(nil), "AddSubRequest")
	proto.RegisterType((*FlowSubReply)(nil), "FlowSubReply")
	proto.RegisterType((*GetTargetPathRequest)(nil), "GetTargetPathRequest")
	proto.RegisterType((*TargetPathReply)(nil), "TargetPathReply")
	proto.RegisterType((*RemoveSubRequest)(nil), "RemoveSubRequest")
	proto.RegisterType((*BlankRequest)(nil), "BlankRequest")
	proto.RegisterType((*InfoReply)(nil), "InfoReply")
}

func init() {
	proto.RegisterFile("redux.proto", fileDescriptor_27440ba755049910)
}

var fileDescriptor_27440ba755049910 = []byte{
	// 376 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x7c, 0x52, 0x4d, 0x6f, 0xea, 0x30,
	0x10, 0x24, 0xf0, 0x88, 0x60, 0x21, 0x3c, 0xde, 0x8a, 0x57, 0xa1, 0x1c, 0xfa, 0xe1, 0x43, 0x41,
	0xaa, 0x64, 0x55, 0xed, 0xad, 0x37, 0x38, 0xb4, 0xe2, 0x80, 0x84, 0x12, 0xa4, 0x9e, 0x03, 0x71,
	0x83, 0x54, 0x8a, 0x53, 0xec, 0x94, 0xf2, 0xbf, 0xfa, 0x03, 0x6b, 0x9b, 0x34, 0x09, 0x08, 0x7a,
	0x62, 0xd7, 0x3b, 0xcc, 0xee, 0xcc, 0x04, 0x1a, 0x6b, 0x16, 0x26, 0x9f, 0x34, 0x5e, 0x73, 0xc9,
	0xc9, 0x05, 0x54, 0x3d, 0x16, 0x2f, 0xb7, 0x78, 0x06, 0xb6, 0x90, 0x81, 0x4c, 0x44, 0xd7, 0xba,
	0xb4, 0xfa, 0x75, 0x2f, 0xed, 0x14, 0xc0, 0x19, 0x84, 0xe1, 0x24, 0x99, 0x79, 0xec, 0x3d, 0x61,
	0x42, 0x62, 0x0b, 0xca, 0xa3, 0x30, 0x05, 0xa9, 0x8a, 0x50, 0x00, 0x35, 0x1d, 0x33, 0x21, 0x82,
	0x88, 0x1d, 0x4e, 0xb1, 0x0d, 0x95, 0xb1, 0x88, 0xba, 0x65, 0xf3, 0xa0, 0x4b, 0x42, 0xa0, 0xed,
	0xb1, 0x37, 0xfe, 0xc1, 0x7e, 0xe1, 0x7c, 0x36, 0x4b, 0xfd, 0x93, 0x00, 0x3c, 0x07, 0x18, 0xcc,
	0xe7, 0x2c, 0x96, 0xd3, 0x6d, 0xcc, 0x52, 0xf6, 0xc2, 0x8b, 0x56, 0x33, 0x12, 0x8f, 0x4b, 0xbe,
	0xe9, 0x56, 0xd4, 0xac, 0xe6, 0xa5, 0x9d, 0x5a, 0xde, 0xd4, 0xbf, 0x86, 0x59, 0xab, 0x46, 0xf8,
	0x33, 0xe4, 0xe1, 0x36, 0x65, 0x36, 0x35, 0xb9, 0x86, 0xce, 0x13, 0x93, 0xd3, 0x60, 0x1d, 0x31,
	0x39, 0x09, 0xe4, 0xe2, 0xd4, 0x91, 0x3d, 0xf8, 0x5b, 0x04, 0x69, 0xba, 0x0e, 0x54, 0x75, 0xa3,
	0x3d, 0xac, 0x28, 0xd4, 0xae, 0xc9, 0x15, 0x9f, 0x16, 0x44, 0x5a, 0xd0, 0x1c, 0x2e, 0x83, 0xd5,
	0x6b, 0x3a, 0x57, 0xb6, 0xd7, 0x47, 0xab, 0x17, 0x9e, 0x5d, 0xa9, 0x1b, 0x03, 0x6f, 0x7a, 0xa6,
	0xbe, 0xfb, 0x2a, 0xeb, 0xe4, 0x54, 0x90, 0x48, 0xc0, 0xde, 0x25, 0x84, 0x2d, 0xba, 0x17, 0x95,
	0x6b, 0x53, 0xf3, 0x7f, 0x52, 0xc2, 0x2b, 0xb0, 0x75, 0x48, 0x22, 0xc2, 0x06, 0xcd, 0xd3, 0xca,
	0x01, 0x7d, 0x0b, 0xfb, 0x50, 0xcf, 0x72, 0xc1, 0x7f, 0xf4, 0x30, 0xa3, 0x02, 0xd9, 0x8d, 0x59,
	0xe8, 0xff, 0x2c, 0xcc, 0x55, 0xb9, 0x0e, 0x2d, 0xba, 0x4b, 0x4a, 0xb7, 0x16, 0x3e, 0x80, 0xb3,
	0xe7, 0x26, 0xfe, 0xa7, 0xc7, 0xdc, 0x75, 0xdb, 0xf4, 0xc0, 0x4c, 0xb5, 0x28, 0x3b, 0xc9, 0x2f,
	0x9c, 0xe4, 0x1f, 0x3b, 0xa9, 0x07, 0x35, 0x7f, 0xc1, 0x37, 0xda, 0x19, 0x74, 0x68, 0xd1, 0x49,
	0x17, 0x68, 0x66, 0x24, 0x29, 0xcd, 0x6c, 0xf3, 0xd9, 0xdf, 0x7f, 0x07, 0x00, 0x00, 0xff, 0xff,
	0x93, 0x1b, 0x28, 0xba, 0x05, 0x03, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// ReduxClient is the client API for Redux service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ReduxClient interface {
	//传入id,返回:"ok"
	AddPub(ctx context.Context, in *AddPubRequest, opts ...grpc.CallOption) (*Reply, error)
	//流式传入发布的数据,返回:"ok"
	PubMsg(ctx context.Context, opts ...grpc.CallOption) (Redux_PubMsgClient, error)
	//删除发布,返回:"ok"
	RemovePub(ctx context.Context, in *RemovePubRequest, opts ...grpc.CallOption) (*Reply, error)
	//添加流式订阅,返回流式数据
	AddSub(ctx context.Context, in *AddSubRequest, opts ...grpc.CallOption) (Redux_AddSubClient, error)
	//传入自己id进行注销流式订阅
	GetTargetPath(ctx context.Context, in *GetTargetPathRequest, opts ...grpc.CallOption) (*TargetPathReply, error)
	//传入自己id进行注销
	RemoveSub(ctx context.Context, in *RemoveSubRequest, opts ...grpc.CallOption) (*Reply, error)
	ShowInfo(ctx context.Context, in *BlankRequest, opts ...grpc.CallOption) (*InfoReply, error)
}

type reduxClient struct {
	cc grpc.ClientConnInterface
}

func NewReduxClient(cc grpc.ClientConnInterface) ReduxClient {
	return &reduxClient{cc}
}

func (c *reduxClient) AddPub(ctx context.Context, in *AddPubRequest, opts ...grpc.CallOption) (*Reply, error) {
	out := new(Reply)
	err := c.cc.Invoke(ctx, "/Redux/AddPub", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reduxClient) PubMsg(ctx context.Context, opts ...grpc.CallOption) (Redux_PubMsgClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Redux_serviceDesc.Streams[0], "/Redux/PubMsg", opts...)
	if err != nil {
		return nil, err
	}
	x := &reduxPubMsgClient{stream}
	return x, nil
}

type Redux_PubMsgClient interface {
	Send(*PubMessage) error
	CloseAndRecv() (*Reply, error)
	grpc.ClientStream
}

type reduxPubMsgClient struct {
	grpc.ClientStream
}

func (x *reduxPubMsgClient) Send(m *PubMessage) error {
	return x.ClientStream.SendMsg(m)
}

func (x *reduxPubMsgClient) CloseAndRecv() (*Reply, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(Reply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *reduxClient) RemovePub(ctx context.Context, in *RemovePubRequest, opts ...grpc.CallOption) (*Reply, error) {
	out := new(Reply)
	err := c.cc.Invoke(ctx, "/Redux/RemovePub", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reduxClient) AddSub(ctx context.Context, in *AddSubRequest, opts ...grpc.CallOption) (Redux_AddSubClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Redux_serviceDesc.Streams[1], "/Redux/AddSub", opts...)
	if err != nil {
		return nil, err
	}
	x := &reduxAddSubClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Redux_AddSubClient interface {
	Recv() (*FlowSubReply, error)
	grpc.ClientStream
}

type reduxAddSubClient struct {
	grpc.ClientStream
}

func (x *reduxAddSubClient) Recv() (*FlowSubReply, error) {
	m := new(FlowSubReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *reduxClient) GetTargetPath(ctx context.Context, in *GetTargetPathRequest, opts ...grpc.CallOption) (*TargetPathReply, error) {
	out := new(TargetPathReply)
	err := c.cc.Invoke(ctx, "/Redux/GetTargetPath", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reduxClient) RemoveSub(ctx context.Context, in *RemoveSubRequest, opts ...grpc.CallOption) (*Reply, error) {
	out := new(Reply)
	err := c.cc.Invoke(ctx, "/Redux/RemoveSub", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reduxClient) ShowInfo(ctx context.Context, in *BlankRequest, opts ...grpc.CallOption) (*InfoReply, error) {
	out := new(InfoReply)
	err := c.cc.Invoke(ctx, "/Redux/ShowInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ReduxServer is the server API for Redux service.
type ReduxServer interface {
	//传入id,返回:"ok"
	AddPub(context.Context, *AddPubRequest) (*Reply, error)
	//流式传入发布的数据,返回:"ok"
	PubMsg(Redux_PubMsgServer) error
	//删除发布,返回:"ok"
	RemovePub(context.Context, *RemovePubRequest) (*Reply, error)
	//添加流式订阅,返回流式数据
	AddSub(*AddSubRequest, Redux_AddSubServer) error
	//传入自己id进行注销流式订阅
	GetTargetPath(context.Context, *GetTargetPathRequest) (*TargetPathReply, error)
	//传入自己id进行注销
	RemoveSub(context.Context, *RemoveSubRequest) (*Reply, error)
	ShowInfo(context.Context, *BlankRequest) (*InfoReply, error)
}

// UnimplementedReduxServer can be embedded to have forward compatible implementations.
type UnimplementedReduxServer struct {
}

func (*UnimplementedReduxServer) AddPub(ctx context.Context, req *AddPubRequest) (*Reply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddPub not implemented")
}
func (*UnimplementedReduxServer) PubMsg(srv Redux_PubMsgServer) error {
	return status.Errorf(codes.Unimplemented, "method PubMsg not implemented")
}
func (*UnimplementedReduxServer) RemovePub(ctx context.Context, req *RemovePubRequest) (*Reply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemovePub not implemented")
}
func (*UnimplementedReduxServer) AddSub(req *AddSubRequest, srv Redux_AddSubServer) error {
	return status.Errorf(codes.Unimplemented, "method AddSub not implemented")
}
func (*UnimplementedReduxServer) GetTargetPath(ctx context.Context, req *GetTargetPathRequest) (*TargetPathReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTargetPath not implemented")
}
func (*UnimplementedReduxServer) RemoveSub(ctx context.Context, req *RemoveSubRequest) (*Reply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveSub not implemented")
}
func (*UnimplementedReduxServer) ShowInfo(ctx context.Context, req *BlankRequest) (*InfoReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShowInfo not implemented")
}

func RegisterReduxServer(s *grpc.Server, srv ReduxServer) {
	s.RegisterService(&_Redux_serviceDesc, srv)
}

func _Redux_AddPub_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddPubRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReduxServer).AddPub(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Redux/AddPub",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReduxServer).AddPub(ctx, req.(*AddPubRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Redux_PubMsg_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ReduxServer).PubMsg(&reduxPubMsgServer{stream})
}

type Redux_PubMsgServer interface {
	SendAndClose(*Reply) error
	Recv() (*PubMessage, error)
	grpc.ServerStream
}

type reduxPubMsgServer struct {
	grpc.ServerStream
}

func (x *reduxPubMsgServer) SendAndClose(m *Reply) error {
	return x.ServerStream.SendMsg(m)
}

func (x *reduxPubMsgServer) Recv() (*PubMessage, error) {
	m := new(PubMessage)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Redux_RemovePub_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemovePubRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReduxServer).RemovePub(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Redux/RemovePub",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReduxServer).RemovePub(ctx, req.(*RemovePubRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Redux_AddSub_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(AddSubRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ReduxServer).AddSub(m, &reduxAddSubServer{stream})
}

type Redux_AddSubServer interface {
	Send(*FlowSubReply) error
	grpc.ServerStream
}

type reduxAddSubServer struct {
	grpc.ServerStream
}

func (x *reduxAddSubServer) Send(m *FlowSubReply) error {
	return x.ServerStream.SendMsg(m)
}

func _Redux_GetTargetPath_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTargetPathRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReduxServer).GetTargetPath(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Redux/GetTargetPath",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReduxServer).GetTargetPath(ctx, req.(*GetTargetPathRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Redux_RemoveSub_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveSubRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReduxServer).RemoveSub(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Redux/RemoveSub",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReduxServer).RemoveSub(ctx, req.(*RemoveSubRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Redux_ShowInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BlankRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReduxServer).ShowInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Redux/ShowInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReduxServer).ShowInfo(ctx, req.(*BlankRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Redux_serviceDesc = grpc.ServiceDesc{
	ServiceName: "Redux",
	HandlerType: (*ReduxServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddPub",
			Handler:    _Redux_AddPub_Handler,
		},
		{
			MethodName: "RemovePub",
			Handler:    _Redux_RemovePub_Handler,
		},
		{
			MethodName: "GetTargetPath",
			Handler:    _Redux_GetTargetPath_Handler,
		},
		{
			MethodName: "RemoveSub",
			Handler:    _Redux_RemoveSub_Handler,
		},
		{
			MethodName: "ShowInfo",
			Handler:    _Redux_ShowInfo_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "PubMsg",
			Handler:       _Redux_PubMsg_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "AddSub",
			Handler:       _Redux_AddSub_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "redux.proto",
}
